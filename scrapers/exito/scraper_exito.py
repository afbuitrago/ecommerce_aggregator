# -*- coding: utf-8 -*-

"""
Paso 1: Script para abrir el navegador, navegar a Jumbo.co,
y hacer clic en el bot√≥n "Todas las categor√≠as" para desplegar el men√∫.

Este script utiliza Selenium para la automatizaci√≥n del navegador y
prepara el terreno para usar BeautifulSoup para el an√°lisis del HTML.
"""

import time
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from webdriver_manager.chrome import ChromeDriverManager

# --- Configuraci√≥n ---
URL_TIENDA = "https://www.tiendasjumbo.co"
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36"

# --- Selectores CSS Clave ---
# Selector del bot√≥n para abrir el men√∫ principal de categor√≠as
SELECTOR_MENU_PRINCIPAL = "button.tiendasjumboqaio-jumbo-general-apps-2-x-triggerButton--tigger-dropdown-mega-menu"
# Selector para el bot√≥n de cierre del modal de ubicaci√≥n que aparece al inicio
SELECTOR_CIERRE_MODAL_UBICACION = "button.tiendasjumboqaio-delivery-modal-3-x-closeButton"
# Selector para el contenedor del men√∫ (para confirmar que se despleg√≥)
SELECTOR_CONTENEDOR_MENU = ".tiendasjumboqaio-jumbo-general-apps-2-x-containerMegaMenu--tigger-dropdown-mega-menu"


def configurar_driver_visible(user_agent: str) -> webdriver.Chrome:
    """
    Configura e inicializa una instancia VISIBLE del WebDriver de Chrome.
    El modo visible es para que podamos observar la automatizaci√≥n en acci√≥n.
    """
    options = webdriver.ChromeOptions()
    options.add_argument(f"user-agent={user_agent}")
    options.add_argument("--start-maximized")
    options.add_argument("--disable-notifications")
    
    # webdriver-manager se encarga de descargar y gestionar el driver de Chrome.
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=options)
    return driver

def main():
    """Funci√≥n principal para orquestar la automatizaci√≥n."""
    
    print("üöÄ Iniciando el navegador...")
    driver = configurar_driver_visible(USER_AGENT)
    
    try:
        # 1. Navegar a la p√°gina de la tienda
        print(f"üß≠ Navegando a: {URL_TIENDA}")
        driver.get(URL_TIENDA)
        
        # Instanciamos WebDriverWait para usar esperas expl√≠citas y robustas
        wait = WebDriverWait(driver, 15)

        # 2. Manejar el modal de ubicaci√≥n que aparece al inicio
        try:
            print("üîé Buscando el modal de ubicaci√≥n para cerrarlo...")
            # Esperamos a que el bot√≥n de cierre del modal sea clickeable
            close_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, SELECTOR_CIERRE_MODAL_UBICACION)))
            close_button.click()
            print("‚úÖ Modal de ubicaci√≥n cerrado exitosamente.")
            time.sleep(1) # Peque√±a pausa para estabilizar la p√°gina
        except TimeoutException:
            print("üëç No se encontr√≥ el modal de ubicaci√≥n o no fue necesario cerrarlo.")
        
        # 3. Encontrar y hacer clic en el bot√≥n "Todas las categor√≠as"
        print("üîé Buscando el bot√≥n 'Todas las categor√≠as'...")
        
        # Esperamos a que el bot√≥n del men√∫ sea visible y se pueda hacer clic en √©l
        menu_trigger = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, SELECTOR_MENU_PRINCIPAL)))
        
        print("‚úÖ Bot√≥n encontrado. Haciendo clic...")
        menu_trigger.click()
        
        # 4. Confirmar que el men√∫ se ha desplegado
        wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTOR_CONTENEDOR_MENU)))
        print("\nüéâ ¬°Men√∫ desplegado correctamente!")
        
        # En el pr√≥ximo paso, aqu√≠ es donde usar√≠amos BeautifulSoup:
        # 1. Obtener el c√≥digo fuente de la p√°gina con el men√∫ desplegado.
        # page_source = driver.page_source
        # 2. Crear un objeto BeautifulSoup para analizar el HTML.
        # soup = BeautifulSoup(page_source, 'html.parser')
        # 3. Empezar a buscar y extraer los enlaces de las categor√≠as.
        # print("C√≥digo fuente de la p√°gina capturado y listo para ser analizado por BeautifulSoup.")

        # 5. Pausa para visualizaci√≥n del usuario
        print("El navegador permanecer√° abierto por 20 segundos para que puedas observar el resultado.")
        time.sleep(20)
        
    except Exception as e:
        print(f"‚ùå Ocurri√≥ un error inesperado durante la ejecuci√≥n: {e}")
        
    finally:
        # 6. Cerrar el navegador al finalizar
        print("üîö Cerrando el navegador.")
        driver.quit()

if __name__ == "__main__":
    # Para ejecutar este script, aseg√∫rate de tener las librer√≠as necesarias instaladas:
    # pip install selenium beautifulsoup4 webdriver-manager testeo
    main()